@{
    ViewData["Title"] = "Player multi-instrumentos";
    var folder = ViewBag.FolderName ?? "teste";
}

@if (ViewBag.TempoExecucao != null)
{
    <div class="alert alert-info">
        Tempo de conversão: @ViewBag.TempoExecucao
    </div>
}

<h2>Upload de Arquivo MP3</h2>
<form id="formUpload" enctype="multipart/form-data">
    <div id="tempoExecucao" style="font-weight: bold; margin-top: 10px;">Tempo: 0s</div>
    <input type="file" name="file" accept=".mp3" />
    <button type="submit">Upload</button>
</form>

<hr />

<h3>Instrumentos separados</h3>

<!-- Botões globais -->
<div style="margin-bottom: 20px;">
    <button onclick="playAll()">▶️ Play</button>
    <button onclick="pauseAll()">⏸️ Pause</button>
</div>

<!-- Players com controles individuais -->
<div style="display: flex; flex-direction: column; gap: 20px;">

    <div style="margin: 20px 0;">
        <label for="speedControl"><strong>Velocidade de reprodução: <span id="speedLabel">100%</span></strong></label>
        <input id="speedControl" type="range" min="10" max="200" value="100" step="1" onchange="updatePlaybackSpeed(this.value)" />
    </div>

    <button onclick="document.getElementById('speedControl').value = 100; updatePlaybackSpeed(100)">Resetar Velocidade</button>

    <div style="margin: 20px 0;">
        <h3>Loop Personalizado</h3>
        <label for="loopStart">Início (s):</label>
        <input id="loopStart" type="number" min="0" value="0" style="width: 60px;" />

        <label for="loopEnd">Fim (s):</label>
        <input id="loopEnd" type="number" min="1" value="10" style="width: 60px;" />

        <button onclick="ativarLoop()">Ativar Loop</button>
        <button onclick="desativarLoop()">Desativar Loop</button>
    </div>

    <div style="display: flex; flex-direction: column;">
        <audio id="vocal" src="/separados/mdx_extra_q/@folder/vocals.wav" controls></audio>
        <label>Voz</label>
        <input type="range" min="0" max="1" step="0.01" value="1" onchange="setVolume('vocal', this.value)" />
    </div>

    <div style="display: flex; flex-direction: column;">
        <audio id="bateria" src="/separados/mdx_extra_q/@folder/drums.wav" controls></audio>
        <label>Bateria</label>
        <input type="range" min="0" max="1" step="0.01" value="1" onchange="setVolume('bateria', this.value)" />
    </div>

    <div style="display: flex; flex-direction: column;">
        <audio id="baixo" src="/separados/mdx_extra_q/@folder/bass.wav" controls></audio>
        <label>Baixo</label>
        <input type="range" min="0" max="1" step="0.01" value="1" onchange="setVolume('baixo', this.value)" />
    </div>

    <div style="display: flex; flex-direction: column;">
        <audio id="sopros" src="/separados/mdx_extra_q/@folder/brass.wav" controls></audio>
        <label>Sopros</label>
        <input type="range" min="0" max="1" step="0.01" value="1" onchange="setVolume('sopros', this.value)" />
    </div>

    <div style="display: flex; flex-direction: column;">
        <audio id="outros" src="/separados/mdx_extra_q/@folder/other.wav" controls></audio>
        <label>Outros</label>
        <input type="range" min="0" max="1" step="0.01" value="1" onchange="setVolume('outros', this.value)" />
    </div>

    <h2>Carregar pasta com arquivos WAV separados</h2>
    <form id="wavUploadForm" enctype="multipart/form-data">
        <input type="file" id="wavFolderInput" name="files" webkitdirectory directory multiple accept=".wav" />

        <button type="button" onclick="uploadWavFolder()">Enviar</button>
    </form>


    <div id="playersContainer"></div>

</div>

<!-- Script -->
<script>
    const players = ['vocal', 'bateria', 'baixo', 'sopros', 'outros'].map(id => document.getElementById(id));

    function playAll() {
        players.forEach(p => {
            p.currentTime = 0;
            p.play();
        });
    }

    function pauseAll() {
        players.forEach(p => p.pause());
    }

    function setVolume(id, val) {
        document.getElementById(id).volume = parseFloat(val);
    }
</script>

<script>
    function uploadWavFolder() {
        const input = document.getElementById('wavFolderInput');
        const files = input.files;

        if (!files || files.length === 0) {
            alert("Selecione uma pasta com arquivos WAV.");
            return;
        }

        const map = {
            vocals: "vocal",
            drums: "bateria",
            bass: "baixo",
            brass: "sopros",
            other: "outros"
        };

        for (const file of files) {
            const fileName = file.name.toLowerCase();
            const nameWithoutExt = fileName.replace(".wav", "");

            if (map[nameWithoutExt]) {
                const audioId = map[nameWithoutExt];
                const audioElement = document.getElementById(audioId);
                if (audioElement) {
                    audioElement.src = URL.createObjectURL(file);
                }
            }
        }
    }
</script>

<script>
    let tempo = 0;
    let cronometro;

    function iniciarCronometro() {
        tempo = 0;
        document.getElementById("tempoExecucao").textContent = "Tempo: 0s";
        cronometro = setInterval(() => {
            tempo++;
            document.getElementById("tempoExecucao").textContent = `Tempo: ${tempo}s`;
        }, 1000);
    }

    function pararCronometro() {
        clearInterval(cronometro);
        document.getElementById("tempoExecucao").textContent += " (finalizado)";
    }

    document.getElementById("formUpload").addEventListener("submit", function (e) {
        e.preventDefault();

        const formData = new FormData(this);
        iniciarCronometro();

        fetch('/Music/Upload', {
            method: 'POST',
            body: formData
        })
        .then(response => response.text())
        .then(data => {
            pararCronometro();

            // Opcional: mostrar mensagem de retorno
            alert(data);

            // Opcional: atualizar a página para carregar os novos arquivos
            location.reload();
        })
        .catch(error => {
            pararCronometro();
            alert("Erro: " + error);
        });
    });
</script>

<script>
    function updatePlaybackSpeed(percent) {
        const rate = percent / 100;
        players.forEach(p => {
            p.playbackRate = rate;
        });
        document.getElementById("speedLabel").textContent = `${percent}%`;
    }

    // Inicializa players com velocidade normal ao carregar
    document.addEventListener("DOMContentLoaded", () => {
        updatePlaybackSpeed(document.getElementById("speedControl").value);
    });
</script>

<script>
    let loopAtivo = false;
    let intervaloLoop = null;
    let inicioLoop = 0;
    let fimLoop = 10;

    function ativarLoop() {
        inicioLoop = parseFloat(document.getElementById("loopStart").value);
        fimLoop = parseFloat(document.getElementById("loopEnd").value);
        loopAtivo = true;

        clearInterval(intervaloLoop);

        intervaloLoop = setInterval(() => {
            players.forEach(player => {
                if (loopAtivo && player.currentTime >= fimLoop) {
                    player.currentTime = inicioLoop;
                }
            });
        }, 200); // Verifica a cada 200ms
    }

    function desativarLoop() {
        loopAtivo = false;
        clearInterval(intervaloLoop);
    }
</script>
